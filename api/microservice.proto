syntax = "proto3";
package microservice;
option go_package = "/pkg";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "validation/validation.proto";

service Microservice{

  rpc SignIn(SignInRequest) returns (SignInResponse){
    option(google.api.http) = {
      post:"/v1/authentication/sign_in"
      body:"*"
    };
  };

  rpc SignUp(SignUpRequest) returns (SignUpResponse){
    option(google.api.http) = {
      post:"/v1/authentication/sign_up"
      body:"*"
    };
  };

  rpc Logout(LogoutRequest) returns (LogoutResponse){
    option(google.api.http) = {
      post:"/v1/authentication/logout"
      body:"*"
    };
  };

  rpc RefreshToken(google.protobuf.Empty) returns (stream RefreshTokenResponse){
    option(google.api.http) = {
      post:"/v1/authentication/refresh_token"
      body:"*"
    };
  };

  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse){
    option(google.api.http) = {
      post:"/v1/authentication/verify_email/{Token}"
    };
  };

  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse){
    option(google.api.http) = {
      post:"/v1/authentication/reset_password"
      body:"*"
    };
  };

  rpc CreatePermission(CreatePermissionRequest) returns (CreatePermissionResponse){
    option(google.api.http) = {
      post:"/v1/authentication/permission"
      body:"*"
    };
  };

  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse){
    option(google.api.http) = {
      post:"/v1/authentication/role"
      body:"*"
    };
  };

  rpc UpdateUserRoles(UpdateUserRolesRequest) returns (UpdateUserRolesResponse){
    option(google.api.http) = {
      patch:"/v1/authentication/user/{UserId}/role/{RolesId}"
      body:"*"
    };
  };

}

message SignInRequest{
  string Email = 1 [(validate.rules).string.email = true];
  string Password = 2 [(validate.rules).string = {min_len: 8, max_len: 20}];
}

message SignInResponse{
  string AccessToken = 1;
}

message SignUpRequest{
  string Email = 1 [(validate.rules).string.email = true];
  string Password = 2 [(validate.rules).string = {min_len: 8, max_len: 20}];
}

message SignUpResponse{
  string Message = 1;
  string UserId = 2;
}

message LogoutRequest{}

message LogoutResponse{
  string Message = 1;
  string UserId = 2;
}

message RefreshTokenRequest{}

message RefreshTokenResponse{
  string RefreshToken = 1;
}

message VerifyEmailRequest{
  string Token = 1;
}

message VerifyEmailResponse{
  string Message = 1;
}

message ResetPasswordRequest{
  string Token = 1;
}

message ResetPasswordResponse{
  string Message = 1;
}

message CreatePermissionRequest{
  string ServiceName = 1;
  repeated string RolesName = 2;
}

message CreatePermissionResponse{
  string Message = 1;
  string PermissionId = 2;}

message CreateRoleRequest{
  string Name = 1;
  repeated string PermissionsId = 2;
}

message CreateRoleResponse{
  string Message = 1;
  string RoleId = 2;
}

message UpdateUserRolesRequest{
  string UserId = 1;
  repeated string RolesId = 2;
}

message UpdateUserRolesResponse{
  string Message = 1;
  string UserId = 2;
}